{"version":3,"sources":["webpack:///./src/components/ArticleTemplate/index.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Share/index.js","webpack:///./src/components/Disqus/index.js","webpack:///./src/templates/article-page.js","webpack:///./src/components/Content/index.js"],"names":["ArticleTemplate","_ref","content","contentComponent","cover","author","meta_title","meta_desc","tags","title","PostContent","Content","react_default","a","createElement","className","src","alt","style","marginTop","length","map","tag","key","gatsby_browser_entry","to","kebabCase","SE0","slug","date","postURL","config","siteUrl","realPrefix","pathPrefix","image","breadcrumbSchemaOrgJSONLD","@context","@type","itemListElement","position","item","@id","name","blogPostingSchemaOrgJSONLD","url","alternateName","siteTitleAlt","headline","mainEntityOfPage","userName","datePublished","dateModified","publisher","siteTitle","logo","description","Helmet_default","type","JSON","stringify","property","siteFBAppID","userTwitter","Share","render","_this$props","this","props","excerpt","mobile","iconSize","filter","count","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","GooglePlusShareButton","GooglePlusIcon","GooglePlusShareCount","FacebookShareButton","quote","FacebookIcon","FacebookShareCount","LinkedinShareButton","LinkedinIcon","LinkedinShareCount","TelegramShareButton","TelegramIcon","Component","Disqus","_this","_Component","call","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","disqusShortname","main_default","shortname","identifier","onNewComment","__webpack_require__","d","__webpack_exports__","pageQuery","ArticlePage","post","data","markdownRemark","SEO","frontmatter","meta_description","fields","components_ArticleTemplate","html","HTMLContent","components_Share","components_Disqus","propTypes","PropTypes","shape","object","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","dangerouslySetInnerHTML","__html","_ref2"],"mappings":"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","file":"component---src-templates-article-page-js-5dec01cdc9ee1548a5b9.js","sourcesContent":["import React from 'react'\r\nimport Content from '../Content'\r\nimport { kebabCase } from 'lodash'\r\nimport { Link } from 'gatsby'\r\n\r\nconst ArticleTemplate = ({\r\n  content,\r\n  contentComponent,\r\n  cover,\r\n  meta_title,\r\n  meta_desc,\r\n  author,\r\n  tags,\r\n  title,\r\n}) => {\r\n  const PostContent = contentComponent || Content\r\n  return (\r\n    <div>\r\n      <h1 className='title is-size-2 has-text-weight-bold is-bold-light'>\r\n        {title}\r\n      </h1>\r\n      <img src={cover} alt={title} />\r\n      <PostContent content={content} />\r\n      <div style={{ marginTop: `4rem` }}>\r\n        <h4>Tags</h4>\r\n        <ul className='taglist'>\r\n          {(tags && tags.length)\r\n            ? tags.map(tag => (\r\n              <li key={tag + `tag`}>\r\n                <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\r\n              </li>\r\n            ))\r\n            : null\r\n          }\r\n        </ul>\r\n      </div>\r\n      <hr />\r\n      <cite> â€“ {author}</cite>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ArticleTemplate\r\n","import React from 'react'\r\nimport config from '../../../data/config'\r\nimport Helmet from 'react-helmet'\r\n\r\nconst SE0 = ({ title, meta_title, meta_desc, cover, slug, date }) => {\r\n  let postURL = config.siteUrl + slug\r\n  const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\r\n  let image = config.siteUrl + realPrefix + cover\r\n\r\n  const breadcrumbSchemaOrgJSONLD = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'BreadcrumbList',\r\n    itemListElement: [\r\n      {\r\n        '@type': 'ListItem',\r\n        position: 1,\r\n        item: {\r\n          '@id': config.siteUrl,\r\n          name: 'Home',\r\n          image: config.siteUrl + '/icons/icon-512x512.png',\r\n        },\r\n      },\r\n      {\r\n        '@type': 'ListItem',\r\n        position: 2,\r\n        item: {\r\n          '@id': postURL,\r\n          name: title,\r\n          image,\r\n        },\r\n      },\r\n    ],\r\n  }\r\n\r\n  const blogPostingSchemaOrgJSONLD = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'BlogPosting',\r\n    url: postURL,\r\n    name: title,\r\n    alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\r\n    headline: title,\r\n    mainEntityOfPage: {\r\n      '@type': 'WebPage',\r\n      '@id': postURL,\r\n    },\r\n    'author': {\r\n      '@type': 'Person',\r\n      'name': config.userName,\r\n    },\r\n    image: {\r\n      '@type': 'ImageObject',\r\n      url: image,\r\n    },\r\n    datePublished: date,\r\n    dateModified: date,\r\n    publisher: {\r\n      '@type': 'Organization',\r\n      name: config.siteTitle,\r\n      logo: {\r\n        '@type': 'ImageObject',\r\n        url: config.siteUrl + '/icons/icon-512x512.png',\r\n      },\r\n    },\r\n    description: meta_desc,\r\n  }\r\n\r\n  return (\r\n    <Helmet>\r\n      <title>{meta_title}</title>\r\n      {/* General tags */}\r\n      <meta name='description' content={meta_desc} />\r\n      <meta name='image' content={cover} />\r\n      {/* Schema.org tags */}\r\n      <script type='application/ld+json'>\r\n        {JSON.stringify(breadcrumbSchemaOrgJSONLD)}\r\n      </script>\r\n      <script type='application/ld+json'>\r\n        {JSON.stringify(blogPostingSchemaOrgJSONLD)}\r\n      </script>\r\n      {/* OpenGraph tags */}\r\n      <meta property='og:url' content={postURL} />\r\n      <meta property='og:type' content='article' />\r\n      <meta property='og:title' content={title} />\r\n      <meta property='og:description' content={meta_desc} />\r\n      <meta property='og:image' content={image} />\r\n      <meta\r\n        property='fb:app_id'\r\n        content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n      />\r\n      {/* Twitter Card tags */}\r\n      <meta name='twitter:card' content='summary_large_image' />\r\n      <meta\r\n        name='twitter:creator'\r\n        content={config.userTwitter ? config.userTwitter : ''}\r\n      />\r\n      <meta name='twitter:title' content={title} />\r\n      <meta name='twitter:description' content={meta_desc} />\r\n      <meta name='twitter:image' content={image} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default SE0\r\n","import React, {Component} from 'react'\r\nimport {\r\n  FacebookShareButton,\r\n  GooglePlusShareButton,\r\n  LinkedinShareButton,\r\n  TwitterShareButton,\r\n  TelegramShareButton,\r\n  RedditShareButton,\r\n  FacebookShareCount,\r\n  GooglePlusShareCount,\r\n  LinkedinShareCount,\r\n  RedditShareCount,\r\n  FacebookIcon,\r\n  TwitterIcon,\r\n  TelegramIcon,\r\n  GooglePlusIcon,\r\n  LinkedinIcon,\r\n  RedditIcon,\r\n} from 'react-share'\r\nimport config from '../../../data/config'\r\nimport './styles.sass'\r\n\r\nclass Share extends Component {\r\n  render () {\r\n    const {title, slug, excerpt, mobile} = this.props\r\n    const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\r\n    const url = config.siteUrl + realPrefix + slug\r\n\r\n    const iconSize = mobile ? 36 : 48\r\n    const filter = count => (count > 0 ? count : '')\r\n\r\n    return (\r\n      <div className='social-links'>\r\n        <RedditShareButton url={url} title={title}>\r\n          <RedditIcon round size={iconSize} />\r\n          <RedditShareCount url={url}>\r\n            {count => <div className='share-count'>{filter(count)}</div>}\r\n          </RedditShareCount>\r\n        </RedditShareButton>\r\n        <TwitterShareButton url={url} title={title}>\r\n          <TwitterIcon round size={iconSize} />\r\n        </TwitterShareButton>\r\n        <GooglePlusShareButton url={url}>\r\n          <GooglePlusIcon round size={iconSize} />\r\n          <GooglePlusShareCount url={url}>\r\n            {count => <div className='share-count'>{filter(count)}</div>}\r\n          </GooglePlusShareCount>\r\n        </GooglePlusShareButton>\r\n        <FacebookShareButton url={url} quote={excerpt}>\r\n          <FacebookIcon round size={iconSize} />\r\n          <FacebookShareCount url={url}>\r\n            {count => <div className='share-count'>{filter(count)}</div>}\r\n          </FacebookShareCount>\r\n        </FacebookShareButton>\r\n        <LinkedinShareButton\r\n          url={url}\r\n          title={title}\r\n          description={excerpt}\r\n        >\r\n          <LinkedinIcon round size={iconSize} />\r\n          <LinkedinShareCount url={url}>\r\n            {count => <div className='share-count'>{filter(count)}</div>}\r\n          </LinkedinShareCount>\r\n        </LinkedinShareButton>\r\n        <TelegramShareButton url={url}>\r\n          <TelegramIcon round size={iconSize} />\r\n        </TelegramShareButton>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Share\r\n","import React, {Component} from 'react'\r\nimport ReactDisqusComments from 'react-disqus-comments'\r\nimport config from '../../../data/config'\r\n\r\nclass Disqus extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      toasts: [],\r\n    }\r\n    this.notifyAboutComment = this.notifyAboutComment.bind(this)\r\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this)\r\n  }\r\n\r\n  onSnackbarDismiss () {\r\n    const [, ...toasts] = this.state.toasts\r\n    this.setState({toasts})\r\n  }\r\n\r\n  notifyAboutComment () {\r\n    const toasts = this.state.toasts.slice()\r\n    toasts.push({text: 'New comment available!'})\r\n    this.setState({toasts})\r\n  }\r\n\r\n  render () {\r\n    const {title, slug} = this.props\r\n    if (!config.disqusShortname) {\r\n      return null\r\n    }\r\n    const url = config.siteUrl + config.pathPrefix + slug\r\n    return (\r\n      <ReactDisqusComments\r\n        shortname={config.disqusShortname}\r\n        identifier={title}\r\n        title={title}\r\n        url={url}\r\n        onNewComment={this.notifyAboutComment}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Disqus\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {graphql} from 'gatsby'\r\nimport {HTMLContent} from '../components/Content'\r\nimport ArticleTemplate from '../components/ArticleTemplate'\r\nimport SE0 from '../components/SEO'\r\nimport Share from '../components/Share'\r\nimport Disqus from '../components/Disqus'\r\n\r\nconst ArticlePage = ({data}) => {\r\n  const {markdownRemark: post} = data\r\n  return (\r\n    <section className='section'>\r\n      <SE0\r\n        title={post.frontmatter.title}\r\n        meta_title={post.frontmatter.meta_title}\r\n        meta_desc={post.frontmatter.meta_description}\r\n        cover={post.frontmatter.cover}\r\n        author={post.frontmatter.author}\r\n        slug={post.fields.slug}\r\n      />\r\n      <div className='container content'>\r\n        <div className='columns'>\r\n          <div className='column is-10 is-offset-1'>\r\n            <ArticleTemplate\r\n              content={post.html}\r\n              contentComponent={HTMLContent}\r\n              cover={post.frontmatter.cover}\r\n              meta_title={post.frontmatter.meta_title}\r\n              meta_desc={post.frontmatter.meta_description}\r\n              author={post.frontmatter.author}\r\n              tags={post.frontmatter.tags}\r\n              title={post.frontmatter.title}\r\n            />\r\n            <Share\r\n              title={post.frontmatter.title}\r\n              slug={post.fields.slug}\r\n              excerpt={post.frontmatter.meta_description}\r\n            />\r\n            <hr />\r\n            <Disqus\r\n              title={post.frontmatter.title}\r\n              slug={post.fields.slug}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nArticlePage.propTypes = {\r\n  data: PropTypes.shape({\r\n    markdownRemark: PropTypes.object,\r\n  }),\r\n}\r\n\r\nexport default ArticlePage\r\n\r\nexport const pageQuery = graphql`\r\n  query ArticleByID($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      html\r\n      fields {\r\n            slug\r\n          }\r\n      frontmatter {\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        title\r\n        cover\r\n        meta_title\r\n        meta_description\r\n        author\r\n        tags\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\n\r\nexport const HTMLContent = ({ content, className }) => (\r\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\r\n)\r\n\r\nconst Content = ({ content, className }) => (\r\n  <div className={className}>{content}</div>\r\n)\r\n\r\nexport default Content\r\n"],"sourceRoot":""}